- fn: 'test-procedure-1.1'
  args:
    - int@builtin
    - int@builtin
  return:
    - int@builtin
    - int@builtin
  doc: 'this is test procedure 1.1'
  statements:
    - name: joint-1
      call: add[int]
      in:
        - $0
        - $1
    - name: joint-2
      call: sub[int]
      in:
        - $0
        - $1
  out:
    - joint-1[0]
    - joint-2[0]

- fn: 'test-procedure-1.2'
  args:
    - float
    - float
  return:
    - float
    - float
  doc: 'this is test procedure 1.2'
  statements:
    - name: joint-1
      call: add[float]
      in:
        - $0
        - $1
    - name: joint-2
      call: mul[float]
      in:
        - $0
        - $1
    - name: joint-3
      call: mul[float]
      in:
        - joint-1[0]
        - joint-2[0]
    - name: joint-4
      call: add[float]
      in:
        - joint-1[0]
        - joint-2[0]
  out:
    - joint-3[0]
    - joint-4[0]


- fn: 'test-procedure-1.3'
  args:
    - float
    - float
    - float
  return:
    - float
  doc: '(x + y) * z'
  statements:
    - name: joint-1
      call: add[float]
      in:
        - $0
        - $1
    - name: joint-2
      call: mul[float]
      in:
        - joint-1[0]
        - $2
  out:
    - joint-2[0]

- fn: 'test-procedure-1.4'
  args:
    - float
    - float
    - float
  return:
    - float
  doc: 'x + y * z'
  statements:
    - name: joint-1
      call: mul[float]
      in:
        - $1
        - $2
    - name: joint-2
      call: add[float]
      in:
        - $0
        - joint-1[0]
  out:
    - joint-2[0]

- fn: 'test-procedure-1.5'
  args:
    - bool
    - float
    - float
  return:
    - float
  doc: 'z ? x + y : x - y'
  statements:
    - name: x-plus-y
      call: add[float]
      in:
        - $1
        - $2
    - name: x-minus-y
      call: sub[float]
      in:
        - $1
        - $2
    - name: plus-or-minus
      call: converge2[float]
      in:
        - $0
        - x-plus-y[0]
        - x-minus-y[0]
  out:
    - plus-or-minus[0]


- fn: 'test-procedure-1.6'
  args:
    - bool
    - float
    - float
  return:
    - float
  doc: 'z ? x + y : x - y (optimized)'
  statements:
    - name: select-x
      call: diverge2[float]@builtin
      in:
        - $0
        - $1
    - name: x-plus-y
      call: add[float]@builtin
      in:
        - select-x[0]
        - $2
    - name: x-minus-y
      call: sub[float]@builtin
      in:
        - select-x[1]
        - $2
    - name: plus-or-minus
      call: converge2[float]@builtin
      in:
        - $0
        - x-plus-y[0]
        - x-minus-y[0]
  out:
    - plus-or-minus[0]